package com.yunbiao.yb_smart_passage.db2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yunbiao.yb_smart_meeting.db2.VisitorBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VISITOR_BEAN".
*/
public class VisitorBeanDao extends AbstractDao<VisitorBean, Long> {

    public static final String TABLENAME = "VISITOR_BEAN";

    /**
     * Properties of entity VisitorBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property FaceId = new Property(1, String.class, "faceId", false, "FACE_ID");
        public final static Property HeadPath = new Property(2, String.class, "headPath", false, "HEAD_PATH");
        public final static Property VisComId = new Property(3, int.class, "visComId", false, "VIS_COM_ID");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Sex = new Property(5, int.class, "sex", false, "SEX");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property VisDepartId = new Property(7, int.class, "visDepartId", false, "VIS_DEPART_ID");
        public final static Property Reason = new Property(8, String.class, "reason", false, "REASON");
        public final static Property VisName = new Property(9, String.class, "visName", false, "VIS_NAME");
        public final static Property IdCard = new Property(10, String.class, "IdCard", false, "ID_CARD");
        public final static Property Type = new Property(11, int.class, "type", false, "TYPE");
        public final static Property CurrType = new Property(12, int.class, "currType", false, "CURR_TYPE");
        public final static Property VisDepartName = new Property(13, String.class, "visDepartName", false, "VIS_DEPART_NAME");
        public final static Property VisEntryId = new Property(14, int.class, "visEntryId", false, "VIS_ENTRY_ID");
        public final static Property Nation = new Property(15, String.class, "nation", false, "NATION");
        public final static Property Unit = new Property(16, String.class, "unit", false, "UNIT");
        public final static Property CurrEnd = new Property(17, String.class, "currEnd", false, "CURR_END");
        public final static Property Name = new Property(18, String.class, "name", false, "NAME");
        public final static Property Head = new Property(19, String.class, "head", false, "HEAD");
        public final static Property CurrStart = new Property(20, String.class, "currStart", false, "CURR_START");
        public final static Property AddTag = new Property(21, int.class, "addTag", false, "ADD_TAG");
    }


    public VisitorBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VisitorBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VISITOR_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"FACE_ID\" TEXT UNIQUE ," + // 1: faceId
                "\"HEAD_PATH\" TEXT," + // 2: headPath
                "\"VIS_COM_ID\" INTEGER NOT NULL ," + // 3: visComId
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"SEX\" INTEGER NOT NULL ," + // 5: sex
                "\"PHONE\" TEXT," + // 6: phone
                "\"VIS_DEPART_ID\" INTEGER NOT NULL ," + // 7: visDepartId
                "\"REASON\" TEXT," + // 8: reason
                "\"VIS_NAME\" TEXT," + // 9: visName
                "\"ID_CARD\" TEXT," + // 10: IdCard
                "\"TYPE\" INTEGER NOT NULL ," + // 11: type
                "\"CURR_TYPE\" INTEGER NOT NULL ," + // 12: currType
                "\"VIS_DEPART_NAME\" TEXT," + // 13: visDepartName
                "\"VIS_ENTRY_ID\" INTEGER NOT NULL ," + // 14: visEntryId
                "\"NATION\" TEXT," + // 15: nation
                "\"UNIT\" TEXT," + // 16: unit
                "\"CURR_END\" TEXT," + // 17: currEnd
                "\"NAME\" TEXT," + // 18: name
                "\"HEAD\" TEXT," + // 19: head
                "\"CURR_START\" TEXT," + // 20: currStart
                "\"ADD_TAG\" INTEGER NOT NULL );"); // 21: addTag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VISITOR_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VisitorBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(2, faceId);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(3, headPath);
        }
        stmt.bindLong(4, entity.getVisComId());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
        stmt.bindLong(6, entity.getSex());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
        stmt.bindLong(8, entity.getVisDepartId());
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(9, reason);
        }
 
        String visName = entity.getVisName();
        if (visName != null) {
            stmt.bindString(10, visName);
        }
 
        String IdCard = entity.getIdCard();
        if (IdCard != null) {
            stmt.bindString(11, IdCard);
        }
        stmt.bindLong(12, entity.getType());
        stmt.bindLong(13, entity.getCurrType());
 
        String visDepartName = entity.getVisDepartName();
        if (visDepartName != null) {
            stmt.bindString(14, visDepartName);
        }
        stmt.bindLong(15, entity.getVisEntryId());
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(16, nation);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(17, unit);
        }
 
        String currEnd = entity.getCurrEnd();
        if (currEnd != null) {
            stmt.bindString(18, currEnd);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(19, name);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(20, head);
        }
 
        String currStart = entity.getCurrStart();
        if (currStart != null) {
            stmt.bindString(21, currStart);
        }
        stmt.bindLong(22, entity.getAddTag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VisitorBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(2, faceId);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(3, headPath);
        }
        stmt.bindLong(4, entity.getVisComId());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
        stmt.bindLong(6, entity.getSex());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
        stmt.bindLong(8, entity.getVisDepartId());
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(9, reason);
        }
 
        String visName = entity.getVisName();
        if (visName != null) {
            stmt.bindString(10, visName);
        }
 
        String IdCard = entity.getIdCard();
        if (IdCard != null) {
            stmt.bindString(11, IdCard);
        }
        stmt.bindLong(12, entity.getType());
        stmt.bindLong(13, entity.getCurrType());
 
        String visDepartName = entity.getVisDepartName();
        if (visDepartName != null) {
            stmt.bindString(14, visDepartName);
        }
        stmt.bindLong(15, entity.getVisEntryId());
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(16, nation);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(17, unit);
        }
 
        String currEnd = entity.getCurrEnd();
        if (currEnd != null) {
            stmt.bindString(18, currEnd);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(19, name);
        }
 
        String head = entity.getHead();
        if (head != null) {
            stmt.bindString(20, head);
        }
 
        String currStart = entity.getCurrStart();
        if (currStart != null) {
            stmt.bindString(21, currStart);
        }
        stmt.bindLong(22, entity.getAddTag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public VisitorBean readEntity(Cursor cursor, int offset) {
        VisitorBean entity = new VisitorBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // faceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // headPath
            cursor.getInt(offset + 3), // visComId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.getInt(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.getInt(offset + 7), // visDepartId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // reason
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // visName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // IdCard
            cursor.getInt(offset + 11), // type
            cursor.getInt(offset + 12), // currType
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // visDepartName
            cursor.getInt(offset + 14), // visEntryId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // nation
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // unit
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // currEnd
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // name
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // head
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // currStart
            cursor.getInt(offset + 21) // addTag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VisitorBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFaceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHeadPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVisComId(cursor.getInt(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.getInt(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVisDepartId(cursor.getInt(offset + 7));
        entity.setReason(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVisName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIdCard(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.getInt(offset + 11));
        entity.setCurrType(cursor.getInt(offset + 12));
        entity.setVisDepartName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVisEntryId(cursor.getInt(offset + 14));
        entity.setNation(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUnit(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCurrEnd(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setHead(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCurrStart(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAddTag(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VisitorBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VisitorBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VisitorBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
