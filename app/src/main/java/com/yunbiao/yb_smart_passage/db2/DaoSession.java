package com.yunbiao.yb_smart_passage.db2;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.yunbiao.yb_smart_meeting.db2.DepartBean;
import com.yunbiao.yb_smart_meeting.db2.PassageBean;
import com.yunbiao.yb_smart_meeting.db2.UserBean;
import com.yunbiao.yb_smart_meeting.db2.VisitorBean;
import com.yunbiao.yb_smart_meeting.db2.MeetInfo;
import com.yunbiao.yb_smart_meeting.db2.EntryInfo;
import com.yunbiao.yb_smart_meeting.db2.FlowInfo;

import com.yunbiao.yb_smart_passage.db2.DepartBeanDao;
import com.yunbiao.yb_smart_passage.db2.PassageBeanDao;
import com.yunbiao.yb_smart_passage.db2.UserBeanDao;
import com.yunbiao.yb_smart_passage.db2.VisitorBeanDao;
import com.yunbiao.yb_smart_passage.db2.MeetInfoDao;
import com.yunbiao.yb_smart_passage.db2.EntryInfoDao;
import com.yunbiao.yb_smart_passage.db2.FlowInfoDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig departBeanDaoConfig;
    private final DaoConfig passageBeanDaoConfig;
    private final DaoConfig userBeanDaoConfig;
    private final DaoConfig visitorBeanDaoConfig;
    private final DaoConfig meetInfoDaoConfig;
    private final DaoConfig entryInfoDaoConfig;
    private final DaoConfig flowInfoDaoConfig;

    private final DepartBeanDao departBeanDao;
    private final PassageBeanDao passageBeanDao;
    private final UserBeanDao userBeanDao;
    private final VisitorBeanDao visitorBeanDao;
    private final MeetInfoDao meetInfoDao;
    private final EntryInfoDao entryInfoDao;
    private final FlowInfoDao flowInfoDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        departBeanDaoConfig = daoConfigMap.get(DepartBeanDao.class).clone();
        departBeanDaoConfig.initIdentityScope(type);

        passageBeanDaoConfig = daoConfigMap.get(PassageBeanDao.class).clone();
        passageBeanDaoConfig.initIdentityScope(type);

        userBeanDaoConfig = daoConfigMap.get(UserBeanDao.class).clone();
        userBeanDaoConfig.initIdentityScope(type);

        visitorBeanDaoConfig = daoConfigMap.get(VisitorBeanDao.class).clone();
        visitorBeanDaoConfig.initIdentityScope(type);

        meetInfoDaoConfig = daoConfigMap.get(MeetInfoDao.class).clone();
        meetInfoDaoConfig.initIdentityScope(type);

        entryInfoDaoConfig = daoConfigMap.get(EntryInfoDao.class).clone();
        entryInfoDaoConfig.initIdentityScope(type);

        flowInfoDaoConfig = daoConfigMap.get(FlowInfoDao.class).clone();
        flowInfoDaoConfig.initIdentityScope(type);

        departBeanDao = new DepartBeanDao(departBeanDaoConfig, this);
        passageBeanDao = new PassageBeanDao(passageBeanDaoConfig, this);
        userBeanDao = new UserBeanDao(userBeanDaoConfig, this);
        visitorBeanDao = new VisitorBeanDao(visitorBeanDaoConfig, this);
        meetInfoDao = new MeetInfoDao(meetInfoDaoConfig, this);
        entryInfoDao = new EntryInfoDao(entryInfoDaoConfig, this);
        flowInfoDao = new FlowInfoDao(flowInfoDaoConfig, this);

        registerDao(DepartBean.class, departBeanDao);
        registerDao(PassageBean.class, passageBeanDao);
        registerDao(UserBean.class, userBeanDao);
        registerDao(VisitorBean.class, visitorBeanDao);
        registerDao(MeetInfo.class, meetInfoDao);
        registerDao(EntryInfo.class, entryInfoDao);
        registerDao(FlowInfo.class, flowInfoDao);
    }
    
    public void clear() {
        departBeanDaoConfig.clearIdentityScope();
        passageBeanDaoConfig.clearIdentityScope();
        userBeanDaoConfig.clearIdentityScope();
        visitorBeanDaoConfig.clearIdentityScope();
        meetInfoDaoConfig.clearIdentityScope();
        entryInfoDaoConfig.clearIdentityScope();
        flowInfoDaoConfig.clearIdentityScope();
    }

    public DepartBeanDao getDepartBeanDao() {
        return departBeanDao;
    }

    public PassageBeanDao getPassageBeanDao() {
        return passageBeanDao;
    }

    public UserBeanDao getUserBeanDao() {
        return userBeanDao;
    }

    public VisitorBeanDao getVisitorBeanDao() {
        return visitorBeanDao;
    }

    public MeetInfoDao getMeetInfoDao() {
        return meetInfoDao;
    }

    public EntryInfoDao getEntryInfoDao() {
        return entryInfoDao;
    }

    public FlowInfoDao getFlowInfoDao() {
        return flowInfoDao;
    }

}
