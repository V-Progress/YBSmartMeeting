package com.yunbiao.yb_smart_meeting.db2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEPART_BEAN".
*/
public class DepartBeanDao extends AbstractDao<DepartBean, Long> {

    public static final String TABLENAME = "DEPART_BEAN";

    /**
     * Properties of entity DepartBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DepId = new Property(1, long.class, "depId", false, "DEP_ID");
        public final static Property CompId = new Property(2, int.class, "compId", false, "COMP_ID");
        public final static Property DepName = new Property(3, String.class, "depName", false, "DEP_NAME");
    }


    public DepartBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DepartBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEPART_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEP_ID\" INTEGER NOT NULL UNIQUE ," + // 1: depId
                "\"COMP_ID\" INTEGER NOT NULL ," + // 2: compId
                "\"DEP_NAME\" TEXT);"); // 3: depName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEPART_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DepartBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDepId());
        stmt.bindLong(3, entity.getCompId());
 
        String depName = entity.getDepName();
        if (depName != null) {
            stmt.bindString(4, depName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DepartBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDepId());
        stmt.bindLong(3, entity.getCompId());
 
        String depName = entity.getDepName();
        if (depName != null) {
            stmt.bindString(4, depName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DepartBean readEntity(Cursor cursor, int offset) {
        DepartBean entity = new DepartBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // depId
            cursor.getInt(offset + 2), // compId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // depName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DepartBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDepId(cursor.getLong(offset + 1));
        entity.setCompId(cursor.getInt(offset + 2));
        entity.setDepName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DepartBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DepartBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DepartBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
