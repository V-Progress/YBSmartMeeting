package com.yunbiao.yb_smart_meeting.db2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEET_INFO".
*/
public class MeetInfoDao extends AbstractDao<MeetInfo, Long> {

    public static final String TABLENAME = "MEET_INFO";

    /**
     * Properties of entity MeetInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property BeginTime = new Property(1, String.class, "beginTime", false, "BEGIN_TIME");
        public final static Property EndTime = new Property(2, String.class, "endTime", false, "END_TIME");
        public final static Property MeetRoomId = new Property(3, long.class, "meetRoomId", false, "MEET_ROOM_ID");
        public final static Property MeetRoomName = new Property(4, String.class, "meetRoomName", false, "MEET_ROOM_NAME");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Theme = new Property(6, String.class, "theme", false, "THEME");
        public final static Property UserName = new Property(7, String.class, "userName", false, "USER_NAME");
    }


    public MeetInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MeetInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEET_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL UNIQUE ," + // 0: id
                "\"BEGIN_TIME\" TEXT," + // 1: beginTime
                "\"END_TIME\" TEXT," + // 2: endTime
                "\"MEET_ROOM_ID\" INTEGER NOT NULL ," + // 3: meetRoomId
                "\"MEET_ROOM_NAME\" TEXT," + // 4: meetRoomName
                "\"NAME\" TEXT," + // 5: name
                "\"THEME\" TEXT," + // 6: theme
                "\"USER_NAME\" TEXT);"); // 7: userName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEET_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeetInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String beginTime = entity.getBeginTime();
        if (beginTime != null) {
            stmt.bindString(2, beginTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(3, endTime);
        }
        stmt.bindLong(4, entity.getMeetRoomId());
 
        String meetRoomName = entity.getMeetRoomName();
        if (meetRoomName != null) {
            stmt.bindString(5, meetRoomName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String theme = entity.getTheme();
        if (theme != null) {
            stmt.bindString(7, theme);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(8, userName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeetInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String beginTime = entity.getBeginTime();
        if (beginTime != null) {
            stmt.bindString(2, beginTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(3, endTime);
        }
        stmt.bindLong(4, entity.getMeetRoomId());
 
        String meetRoomName = entity.getMeetRoomName();
        if (meetRoomName != null) {
            stmt.bindString(5, meetRoomName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String theme = entity.getTheme();
        if (theme != null) {
            stmt.bindString(7, theme);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(8, userName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MeetInfo readEntity(Cursor cursor, int offset) {
        MeetInfo entity = new MeetInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // beginTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // endTime
            cursor.getLong(offset + 3), // meetRoomId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // meetRoomName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // theme
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // userName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeetInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBeginTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEndTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMeetRoomId(cursor.getLong(offset + 3));
        entity.setMeetRoomName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTheme(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeetInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeetInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeetInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
