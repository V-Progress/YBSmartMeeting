package com.yunbiao.yb_smart_meeting.db2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PASSAGE_BEAN".
*/
public class PassageBeanDao extends AbstractDao<PassageBean, Long> {

    public static final String TABLENAME = "PASSAGE_BEAN";

    /**
     * Properties of entity PassageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EntryId = new Property(1, long.class, "entryId", false, "ENTRY_ID");
        public final static Property VisiId = new Property(2, long.class, "visiId", false, "VISI_ID");
        public final static Property FaceId = new Property(3, String.class, "faceId", false, "FACE_ID");
        public final static Property HeadPath = new Property(4, String.class, "headPath", false, "HEAD_PATH");
        public final static Property DepartName = new Property(5, String.class, "departName", false, "DEPART_NAME");
        public final static Property Similar = new Property(6, String.class, "similar", false, "SIMILAR");
        public final static Property IsPass = new Property(7, int.class, "isPass", false, "IS_PASS");
        public final static Property Name = new Property(8, String.class, "name", false, "NAME");
        public final static Property PassTime = new Property(9, long.class, "passTime", false, "PASS_TIME");
        public final static Property IsUpload = new Property(10, boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property Card = new Property(11, String.class, "card", false, "CARD");
        public final static Property Sex = new Property(12, int.class, "sex", false, "SEX");
        public final static Property CreateDate = new Property(13, String.class, "createDate", false, "CREATE_DATE");
        public final static Property UserType = new Property(14, int.class, "userType", false, "USER_TYPE");
    }


    public PassageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PassageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PASSAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ENTRY_ID\" INTEGER NOT NULL ," + // 1: entryId
                "\"VISI_ID\" INTEGER NOT NULL ," + // 2: visiId
                "\"FACE_ID\" TEXT," + // 3: faceId
                "\"HEAD_PATH\" TEXT," + // 4: headPath
                "\"DEPART_NAME\" TEXT," + // 5: departName
                "\"SIMILAR\" TEXT," + // 6: similar
                "\"IS_PASS\" INTEGER NOT NULL ," + // 7: isPass
                "\"NAME\" TEXT," + // 8: name
                "\"PASS_TIME\" INTEGER NOT NULL ," + // 9: passTime
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 10: isUpload
                "\"CARD\" TEXT," + // 11: card
                "\"SEX\" INTEGER NOT NULL ," + // 12: sex
                "\"CREATE_DATE\" TEXT," + // 13: createDate
                "\"USER_TYPE\" INTEGER NOT NULL );"); // 14: userType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PASSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PassageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEntryId());
        stmt.bindLong(3, entity.getVisiId());
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(4, faceId);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(5, headPath);
        }
 
        String departName = entity.getDepartName();
        if (departName != null) {
            stmt.bindString(6, departName);
        }
 
        String similar = entity.getSimilar();
        if (similar != null) {
            stmt.bindString(7, similar);
        }
        stmt.bindLong(8, entity.getIsPass());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
        stmt.bindLong(10, entity.getPassTime());
        stmt.bindLong(11, entity.getIsUpload() ? 1L: 0L);
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(12, card);
        }
        stmt.bindLong(13, entity.getSex());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(14, createDate);
        }
        stmt.bindLong(15, entity.getUserType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PassageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEntryId());
        stmt.bindLong(3, entity.getVisiId());
 
        String faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindString(4, faceId);
        }
 
        String headPath = entity.getHeadPath();
        if (headPath != null) {
            stmt.bindString(5, headPath);
        }
 
        String departName = entity.getDepartName();
        if (departName != null) {
            stmt.bindString(6, departName);
        }
 
        String similar = entity.getSimilar();
        if (similar != null) {
            stmt.bindString(7, similar);
        }
        stmt.bindLong(8, entity.getIsPass());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(9, name);
        }
        stmt.bindLong(10, entity.getPassTime());
        stmt.bindLong(11, entity.getIsUpload() ? 1L: 0L);
 
        String card = entity.getCard();
        if (card != null) {
            stmt.bindString(12, card);
        }
        stmt.bindLong(13, entity.getSex());
 
        String createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindString(14, createDate);
        }
        stmt.bindLong(15, entity.getUserType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PassageBean readEntity(Cursor cursor, int offset) {
        PassageBean entity = new PassageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // entryId
            cursor.getLong(offset + 2), // visiId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // faceId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // departName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // similar
            cursor.getInt(offset + 7), // isPass
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // name
            cursor.getLong(offset + 9), // passTime
            cursor.getShort(offset + 10) != 0, // isUpload
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // card
            cursor.getInt(offset + 12), // sex
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // createDate
            cursor.getInt(offset + 14) // userType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PassageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEntryId(cursor.getLong(offset + 1));
        entity.setVisiId(cursor.getLong(offset + 2));
        entity.setFaceId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepartName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSimilar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsPass(cursor.getInt(offset + 7));
        entity.setName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPassTime(cursor.getLong(offset + 9));
        entity.setIsUpload(cursor.getShort(offset + 10) != 0);
        entity.setCard(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSex(cursor.getInt(offset + 12));
        entity.setCreateDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserType(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PassageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PassageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PassageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
