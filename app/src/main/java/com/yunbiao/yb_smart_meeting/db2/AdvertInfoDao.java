package com.yunbiao.yb_smart_meeting.db2;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADVERT_INFO".
*/
public class AdvertInfoDao extends AbstractDao<AdvertInfo, Long> {

    public static final String TABLENAME = "ADVERT_INFO";

    /**
     * Properties of entity AdvertInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MeetId = new Property(1, long.class, "meetId", false, "MEET_ID");
        public final static Property ComId = new Property(2, long.class, "comId", false, "COM_ID");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
        public final static Property AdvertId = new Property(5, int.class, "advertId", false, "ADVERT_ID");
        public final static Property Path = new Property(6, String.class, "path", false, "PATH");
        public final static Property ReadNum = new Property(7, long.class, "readNum", false, "READ_NUM");
        public final static Property GoodNum = new Property(8, long.class, "goodNum", false, "GOOD_NUM");
        public final static Property Time = new Property(9, int.class, "time", false, "TIME");
        public final static Property ShareUrl = new Property(10, String.class, "shareUrl", false, "SHARE_URL");
    }


    public AdvertInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AdvertInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADVERT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEET_ID\" INTEGER NOT NULL ," + // 1: meetId
                "\"COM_ID\" INTEGER NOT NULL ," + // 2: comId
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"URL\" TEXT," + // 4: url
                "\"ADVERT_ID\" INTEGER NOT NULL ," + // 5: advertId
                "\"PATH\" TEXT," + // 6: path
                "\"READ_NUM\" INTEGER NOT NULL ," + // 7: readNum
                "\"GOOD_NUM\" INTEGER NOT NULL ," + // 8: goodNum
                "\"TIME\" INTEGER NOT NULL ," + // 9: time
                "\"SHARE_URL\" TEXT);"); // 10: shareUrl
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ADVERT_INFO_MEET_ID_DESC_ADVERT_ID_DESC ON \"ADVERT_INFO\"" +
                " (\"MEET_ID\" DESC,\"ADVERT_ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADVERT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdvertInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMeetId());
        stmt.bindLong(3, entity.getComId());
        stmt.bindLong(4, entity.getType());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
        stmt.bindLong(6, entity.getAdvertId());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
        stmt.bindLong(8, entity.getReadNum());
        stmt.bindLong(9, entity.getGoodNum());
        stmt.bindLong(10, entity.getTime());
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(11, shareUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdvertInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMeetId());
        stmt.bindLong(3, entity.getComId());
        stmt.bindLong(4, entity.getType());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(5, url);
        }
        stmt.bindLong(6, entity.getAdvertId());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(7, path);
        }
        stmt.bindLong(8, entity.getReadNum());
        stmt.bindLong(9, entity.getGoodNum());
        stmt.bindLong(10, entity.getTime());
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(11, shareUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AdvertInfo readEntity(Cursor cursor, int offset) {
        AdvertInfo entity = new AdvertInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // meetId
            cursor.getLong(offset + 2), // comId
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // url
            cursor.getInt(offset + 5), // advertId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // path
            cursor.getLong(offset + 7), // readNum
            cursor.getLong(offset + 8), // goodNum
            cursor.getInt(offset + 9), // time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // shareUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdvertInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMeetId(cursor.getLong(offset + 1));
        entity.setComId(cursor.getLong(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdvertId(cursor.getInt(offset + 5));
        entity.setPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReadNum(cursor.getLong(offset + 7));
        entity.setGoodNum(cursor.getLong(offset + 8));
        entity.setTime(cursor.getInt(offset + 9));
        entity.setShareUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AdvertInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AdvertInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdvertInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
